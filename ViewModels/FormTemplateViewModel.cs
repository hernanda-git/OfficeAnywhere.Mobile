using CommunityToolkit.Maui.Alerts;
using CommunityToolkit.Maui.Core;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using OfficeAnywhere.Mobile.Models;
using OfficeAnywhere.Mobile.Services;
using OfficeAnywhere.Mobile.Views;
using System.Collections.ObjectModel;
using System.Net.Http;
using System.Text.Json;
using System.Windows.Input;
using UraniumUI.Material.Controls;

namespace OfficeAnywhere.Mobile.ViewModels;

public class DynamicField
{
    public string FieldType { get; set; } = string.Empty; // Type of the field (e.g., TextField, Picker, etc.)
    public string Key { get; set; } = string.Empty; // Unique identifier for the field
    public string Label { get; set; } = string.Empty; // Display label
    public string Value { get; set; } = string.Empty; // Current value
    public List<string> Options { get; set; } = new(); // For Picker fields
}

public partial class FormTemplateViewModel : ObservableObject
{
    private readonly FormTemplateService _formTemplateService;
    private readonly HttpClient _httpClient;

    [ObservableProperty]
    private ObservableCollection<View> dynamicContents = new();

    [ObservableProperty]
    private bool isBusy;

    [ObservableProperty]
    private string? profilePicture;

    [ObservableProperty]
    private ObservableCollection<Form> taskType = new();

    [ObservableProperty]
    private Form? selectedTaskType = null;

    [ObservableProperty]
    private ObservableCollection<UserModelV2> users = new();

    [ObservableProperty]
    private UserModelV2? selectedUser = null;

    public FormTemplateViewModel(FormTemplateService formTemplateService, HttpClient httpClient)
    {
        _formTemplateService = formTemplateService;
        _httpClient = httpClient;
        InitializeAsync();
    }

    [RelayCommand]
    private async Task BackAsync()
    {
        await Shell.Current.GoToAsync("//TaskPage", true);
    }

    private async void InitializeAsync()
    {
        await FetchSelectionData();
    }

    [RelayCommand]
    public async Task FetchSelectionData()
    {
        if (IsBusy) return;

        try
        {
            IsBusy = true;

            // Task Type
            List<Form>? taskType = await _formTemplateService.FetchTaskType();
            TaskType.Clear();
            TaskType = new ObservableCollection<Form>(taskType ?? []);

            // Users
            List<UserModelV2>? users = await _formTemplateService.FetchUsers();
            if (users != null && users.Count > 0)
            {
                Users.Clear();
                Users = new ObservableCollection<UserModelV2>(users);
            }
        }
        catch (Exception ex)
        {
            await Snackbar.Make(
                $"Error fetching API: {ex.Message}",
                duration: TimeSpan.FromSeconds(5),
                visualOptions: new SnackbarOptions
                {
                    BackgroundColor = Colors.DarkRed,
                    TextColor = Colors.White,
                    ActionButtonTextColor = Colors.White,
                    CornerRadius = 8,
                    Font = Microsoft.Maui.Font.Default
                }
            ).Show();
        }
        finally
        {
            IsBusy = false;
        }
    }

    partial void OnSelectedUserChanged(UserModelV2? value)
    {
        if (value != null)
        {
            // Handle the selected user
            // For example, display the selected user's ID or name
            Console.WriteLine($"Selected User: {value.UserName}, ID: {value.Id}");
            // You can add logic here, e.g., update UI, trigger actions, etc.
        }
        else
        {
            Console.WriteLine("No user selected.");
        }
    }

    // Implement the partial method generated by [ObservableProperty]
    partial void OnSelectedTaskTypeChanged(Form? oldValue, Form? newValue)
    {
        // Custom logic when SelectedTaskType changes
        if (newValue != null)
        {
            //Console.WriteLine($"Selected Form Changed: {newValue.Name}, Template: {newValue.FormTemplate.Template}");

            DynamicContents.Clear();

            using JsonDocument document = JsonDocument.Parse(newValue.FormTemplate.Template);
            JsonElement root = document.RootElement;

            if (root.TryGetProperty("components", out JsonElement componentsArray) && componentsArray.ValueKind == JsonValueKind.Array)
            {
                processComponents(componentsArray);
            }
        }
        else
        {
            Console.WriteLine("No form selected.");
        }
    }

    private void processComponents(JsonElement componentsArray)
    {
        try
        {
            foreach (JsonElement component in componentsArray.EnumerateArray())
            {
                string? label = component.TryGetProperty("label", out JsonElement labelElement) ? labelElement.GetString() : string.Empty;
                string? legend = component.TryGetProperty("legend", out JsonElement legendElement) ? legendElement.GetString() : string.Empty;
                string? description = component.TryGetProperty("description", out JsonElement descElement) ? descElement.GetString() : string.Empty;
                string? content = component.TryGetProperty("content", out JsonElement contentElement) ? contentElement.GetString() : string.Empty;
                string? type = component.TryGetProperty("type", out JsonElement typeElement) ? typeElement.GetString() : string.Empty;
                string? id = component.TryGetProperty("id", out JsonElement idElement) ? idElement.GetString() : string.Empty;
                string? key = component.TryGetProperty("key", out JsonElement keyElement) ? keyElement.GetString() : string.Empty;
                string? inputType = component.TryGetProperty("inputType", out JsonElement inputTypeElement) ? inputTypeElement.GetString() : string.Empty;

                if (type?.ToLower() == "htmlelement")
                {
                    if (!string.IsNullOrEmpty(content))
                    {
                        DynamicContents.Add(CreateLabel(content, id, FontSizeOption.Large));
                    }
                }

                if (type?.ToLower() == "datagrid")
                {
                    if (!string.IsNullOrEmpty(description))
                    {
                        DynamicContents.Add(CreateLabel(description, id, FontSizeOption.Medium));
                    }

                    if (component.TryGetProperty("components", out JsonElement dataGridComponents))
                    {
                        processComponents(dataGridComponents);
                    }
                }

                if (type?.ToLower() == "fieldset")
                {
                    if (!string.IsNullOrEmpty(legend))
                    {
                        DynamicContents.Add(CreateLabel(legend, id, FontSizeOption.Medium));
                    }

                    if (component.TryGetProperty("components", out JsonElement fieldSetComponents))
                    {
                        processComponents(fieldSetComponents);
                    }
                }

                if (type?.ToLower() == "textfield")
                {
                    DynamicContents.Add(CreateTextField(label, key));
                }

                if (type?.ToLower() == "textarea")
                {
                    DynamicContents.Add(CreateEditorField(label, key));

                    if (component.TryGetProperty("components", out JsonElement fieldSetComponents))
                    {
                        processComponents(fieldSetComponents);
                    }
                }

                if(type?.ToLower() == "radio")
                {
                    if (!string.IsNullOrEmpty(label))
                    {
                        DynamicContents.Add(CreateLabel(label, id, FontSizeOption.Medium));
                    }

                    if (component.TryGetProperty("values", out JsonElement values) && values.ValueKind == JsonValueKind.Array)
                    {
                        List<RadioButtonOption> options = [];
                       
                        foreach (JsonElement row in values.EnumerateArray())
                        {
                            row.TryGetProperty("label", out JsonElement labElement);
                            row.TryGetProperty("value", out JsonElement valueElement);
                            row.TryGetProperty("shortcut", out JsonElement shortcutElement);

                            string labelString =  labElement.GetString() ?? string.Empty;
                            string valueString =  valueElement.GetString() ?? string.Empty;
                            string shortcutString =  shortcutElement.GetString() ?? string.Empty;

                            options.Add(new RadioButtonOption
                            {
                                Label = labelString,
                                Value = valueString,
                                Shortcut = shortcutString
                            });

                        }
                        DynamicContents.Add(createRadioButtonGroup(options));
                    }
                }

                if (type == "select")
                {
                    List<SelectOption> options = new();
                    bool isRequired = component.TryGetProperty("validate", out JsonElement validateElement) && validateElement.TryGetProperty("required", out JsonElement requiredElement) && requiredElement.GetBoolean();

                    if (component.TryGetProperty("dataSrc", out JsonElement dataSrcElement) && dataSrcElement.GetString() == "url")
                    {
                        if (component.TryGetProperty("data", out JsonElement dataElement) && dataElement.TryGetProperty("url", out JsonElement urlElement))
                        {
                            string url = urlElement.GetString() ?? string.Empty;
                            Dictionary<string, string> headers = new();
                            if (dataElement.TryGetProperty("headers", out JsonElement headersElement) && headersElement.ValueKind == JsonValueKind.Array)
                            {
                                foreach (JsonElement header in headersElement.EnumerateArray())
                                {
                                    string headerKey = header.TryGetProperty("key", out JsonElement keyEl) ? keyEl.GetString() ?? string.Empty : string.Empty;
                                    string headerValue = header.TryGetProperty("value", out JsonElement valueEl) ? valueEl.GetString() ?? string.Empty : string.Empty;
                                    if (!string.IsNullOrEmpty(headerKey) && !string.IsNullOrEmpty(headerValue))
                                    {
                                        headers.Add(headerKey, headerValue);
                                    }
                                }
                            }

                            string valueProperty = component.TryGetProperty("valueProperty", out JsonElement valuePropElement) ? valuePropElement.GetString() ?? "Id" : "Id";
                            string displayProperty = component.TryGetProperty("template", out JsonElement templateElement) && templateElement.GetString()?.Contains("item.Name") == true ? "Name" : "value";

                            try
                            {
                                var request = new HttpRequestMessage(HttpMethod.Get, url);
                                string accessToken = SecureStorage.GetAsync("AccessToken").Result ?? "";
                                string tenant = SecureStorage.GetAsync("Tenant").Result ?? "";
                                foreach (var header in headers)
                                {
                                    string value = header.Key.ToLower() == "tenant" ? tenant : header.Value;
                                    request.Headers.Add(header.Key, value);
                                }
                                request.Headers.Add("Authentication", $"Bearer {accessToken}");

                                var response = _httpClient.SendAsync(request).Result;
                                response.EnsureSuccessStatusCode();
                                string jsonResponse = response.Content.ReadAsStringAsync().Result;

                                using JsonDocument doc = JsonDocument.Parse(jsonResponse);
                                JsonElement root = doc.RootElement;

                                if (root.ValueKind == JsonValueKind.Array)
                                {
                                    foreach (JsonElement item in root.EnumerateArray())
                                    {
                                        string value = item.TryGetProperty(valueProperty, out JsonElement valEl) ? valEl.ToString() : string.Empty;
                                        string display = item.TryGetProperty(displayProperty, out JsonElement dispEl) ? dispEl.GetString() ?? value : value;
                                        if (!string.IsNullOrEmpty(value) && !string.IsNullOrEmpty(display))
                                        {
                                            options.Add(new SelectOption { Value = value, Display = display });
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Error fetching select options from {url}: {ex.Message}");
                            }
                        }
                    }
                    else if (component.TryGetProperty("data", out JsonElement dataElement) && dataElement.TryGetProperty("values", out JsonElement valuesElement) && valuesElement.ValueKind == JsonValueKind.Array)
                    {
                        foreach (JsonElement value in valuesElement.EnumerateArray())
                        {
                            if (value.TryGetProperty("label", out JsonElement labelValue) && value.TryGetProperty("value", out JsonElement valueValue))
                            {
                                string display = labelValue.GetString() ?? string.Empty;
                                string val = valueValue.GetString() ?? string.Empty;
                                if (!string.IsNullOrEmpty(display) && !string.IsNullOrEmpty(val))
                                {
                                    options.Add(new SelectOption { Display = display, Value = val });
                                }
                            }
                        }
                    }

                    var picker = CreatePickerField(label, options.Select(o => o.Display), options.FirstOrDefault()?.Display);
                    picker.StyleId = key;
                    DynamicContents.Add(picker);
                }

                if (type?.ToLower() == "button")
                {
                    if (!string.IsNullOrEmpty(label))
                    {
                        DynamicContents.Add(CreateLabel(label, id, FontSizeOption.Medium));
                    }

                }

                if (type?.ToLower() == "table")
                {
                    if (component.TryGetProperty("rows", out JsonElement rowsElement) && component.TryGetProperty("numRows", out JsonElement numRowsElement))
                    {
                        int numRows = numRowsElement.GetInt32();

                        foreach (JsonElement row in rowsElement.EnumerateArray())
                        {
                            foreach (JsonElement cell in row.EnumerateArray())
                            {
                                if (cell.TryGetProperty("components", out JsonElement cellComponents))
                                {
                                    processComponents(cellComponents);
                                }
                            }
                        }
                    }
                }

                if(component.TryGetProperty("table", out JsonElement tableElement))
                {
                    if (component.TryGetProperty("rows", out JsonElement rowsElement) && component.TryGetProperty("numRows", out JsonElement numRowsElement))
                    {
                        int numRows = numRowsElement.GetInt32();

                        foreach (JsonElement row in rowsElement.EnumerateArray())
                        {
                            foreach (JsonElement cell in row.EnumerateArray())
                            {
                                if (cell.TryGetProperty("components", out JsonElement cellComponents))
                                {
                                    processComponents(cellComponents);
                                }
                            }
                        }
                    }
                }
                if (component.TryGetProperty("components", out JsonElement subComponents) && subComponents.ValueKind == JsonValueKind.Array)
                {
                    processComponents(subComponents);
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    public class SelectOption
    {
        public string Value { get; set; } = string.Empty;
        public string Display { get; set; } = string.Empty;
    }

    private Label CreateLabel(string text, string id, FontSizeOption fontSize, Thickness? margin = null)
    {
        return new Label
        {
            Text = text,
            StyleId = id,
            FontSize = (double)fontSize,
            FontAttributes = FontAttributes.Bold,
            Margin = new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a Button
    private Button CreateButton(string text, string id, InputType? inputType = InputType.Text, Thickness? margin = null)
    {
        return new Button
        {
            Text = text,
            StyleId = id,
            FontAttributes = FontAttributes.Bold,
            HeightRequest = 45,
            FontSize = (double)FontSizeOption.Medium,
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a TextField
    private TextField CreateTextField(string text, string id, InputType? inputType = InputType.Text, Thickness? margin = null)
    {
        return new TextField
        {
            Title = text,
            StyleId = id,
            FontSize = (double)FontSizeOption.Medium,
            Keyboard = Keyboard.Text,
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a EditorField
    private EditorField CreateEditorField(string text, string id, InputType? inputType = InputType.Text, Thickness? margin = null)
    {
        return new EditorField
        {
            Title = text,
            StyleId = id,
            FontSize = (double)FontSizeOption.Medium,
            Keyboard = Keyboard.Text,
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a PickerField
    private PickerField CreatePickerField(string title, IEnumerable<string> items, string defaultSelection = null, Thickness? margin = null)
    {
        return new PickerField
        {
            Title = title,
            ItemsSource = items.ToList(),
            SelectedItem = defaultSelection ?? items.FirstOrDefault(), // Default to first item if none specified
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a DatePickerField
    private DatePickerField CreateDatePickerField(string title, DateTime? defaultDate = null, Thickness? margin = null)
    {
        return new DatePickerField
        {
            Title = title,
            Date = defaultDate ?? DateTime.Now, // Default to current date if none specified
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    public class RadioButtonOption
    {
        public string Label { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public string Shortcut { get; set; } = string.Empty;
    }
    private RadioButtonGroupView createRadioButtonGroup(List<RadioButtonOption> options, Thickness? margin = null)
    {
        RadioButtonGroupView radioButtonGroupView = new RadioButtonGroupView
        {
            Margin = margin ?? new Thickness(0, 0, 0, 20),
            //Orientation = StackOrientation.Horizontal,
        };

        int optionIndex = 0;
        foreach (RadioButtonOption option in options)
        {
            radioButtonGroupView.Children.Add(new UraniumUI.Material.Controls.RadioButton
            {
                Text = option.Label,
                Value = option.Value,
                TextFontSize = (double)FontSizeOption.Medium,
                IsChecked = optionIndex == 0
            });
            optionIndex++;
        }

        return radioButtonGroupView;
    }

    private RadioButtonGroupView CreateRadioButtonGroupView(string[] options, string[] values, Thickness? margin = null)
    {
        if (options.Length != values.Length)
        {
            throw new ArgumentException("Options and values arrays must have the same length.");
        }

        var radioButtonGroupView = new RadioButtonGroupView
        {
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };

        for (int i = 0; i < options.Length; i++)
        {
            radioButtonGroupView.Children.Add(new UraniumUI.Material.Controls.RadioButton
            {
                Text = options[i],
                Value = values[i],
                IsChecked = true
            });
        }

        return radioButtonGroupView;
    }
}