using CommunityToolkit.Maui.Alerts;
using CommunityToolkit.Maui.Core;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using OfficeAnywhere.Mobile.Models;
using OfficeAnywhere.Mobile.Services;
using OfficeAnywhere.Mobile.Views;
using System.Collections.ObjectModel;
using System.Text.Json;
using System.Windows.Input;
using UraniumUI.Material.Controls;

namespace OfficeAnywhere.Mobile.ViewModels;

public class DynamicField
{
    public string FieldType { get; set; } = string.Empty; // Type of the field (e.g., TextField, Picker, etc.)
    public string Key { get; set; } = string.Empty; // Unique identifier for the field
    public string Label { get; set; } = string.Empty; // Display label
    public string Value { get; set; } = string.Empty; // Current value
    public List<string> Options { get; set; } = new(); // For Picker fields
}

public partial class FormTemplateViewModel : ObservableObject
{
    private readonly FormTemplateService _formTemplateService;

    [ObservableProperty]
    private ObservableCollection<View> dynamicContents = new();

    [ObservableProperty]
    private bool isBusy;

    [ObservableProperty]
    private string? profilePicture;

    [ObservableProperty]
    private ObservableCollection<Form> taskType = new();

    [ObservableProperty]
    private Form? selectedTaskType = null;

    [ObservableProperty]
    private ObservableCollection<UserModelV2> users = new();

    [ObservableProperty]
    private UserModelV2? selectedUser = null;

    public FormTemplateViewModel(FormTemplateService formTemplateService)
    {
        _formTemplateService = formTemplateService;
        InitializeAsync();
    }

    [RelayCommand]
    private async Task BackAsync()
    {
        await Shell.Current.GoToAsync("//TaskPage", true);
    }

    private async void InitializeAsync()
    {
        await FetchSelectionData();
    }

    [RelayCommand]
    public async Task FetchSelectionData()
    {
        if (IsBusy) return;

        try
        {
            IsBusy = true;

            // Task Type
            List<Form>? taskType = await _formTemplateService.FetchTaskType();
            TaskType.Clear();
            TaskType = new ObservableCollection<Form>(taskType ?? []);

            // Users
            List<UserModelV2>? users = await _formTemplateService.FetchUsers();
            if (users != null && users.Count > 0)
            {
                Users.Clear();
                Users = new ObservableCollection<UserModelV2>(users);
            }
        }
        catch (Exception ex)
        {
            await Snackbar.Make(
                $"Error fetching API: {ex.Message}",
                duration: TimeSpan.FromSeconds(5),
                visualOptions: new SnackbarOptions
                {
                    BackgroundColor = Colors.DarkRed,
                    TextColor = Colors.White,
                    ActionButtonTextColor = Colors.White,
                    CornerRadius = 8,
                    Font = Microsoft.Maui.Font.Default
                }
            ).Show();
        }
        finally
        {
            IsBusy = false;
        }
    }

    partial void OnSelectedUserChanged(UserModelV2? value)
    {
        if (value != null)
        {
            // Handle the selected user
            // For example, display the selected user's ID or name
            Console.WriteLine($"Selected User: {value.UserName}, ID: {value.Id}");
            // You can add logic here, e.g., update UI, trigger actions, etc.
        }
        else
        {
            Console.WriteLine("No user selected.");
        }
    }

    // Implement the partial method generated by [ObservableProperty]
    partial void OnSelectedTaskTypeChanged(Form? oldValue, Form? newValue)
    {
        // Custom logic when SelectedTaskType changes
        if (newValue != null)
        {
            //Console.WriteLine($"Selected Form Changed: {newValue.Name}, Template: {newValue.FormTemplate.Template}");

            DynamicContents.Clear();

            using JsonDocument document = JsonDocument.Parse(newValue.FormTemplate.Template);
            JsonElement root = document.RootElement;

            if (root.TryGetProperty("components", out JsonElement componentsArray) && componentsArray.ValueKind == JsonValueKind.Array)
            {
                processComponents(componentsArray);
            }
        }
        else
        {
            Console.WriteLine("No form selected.");
        }
    }

    private void processComponents(JsonElement componentsArray)
    {
        try
        {
            foreach (JsonElement component in componentsArray.EnumerateArray())
            {
                string? label = component.TryGetProperty("label", out JsonElement labelElement) ? labelElement.GetString() : string.Empty;
                string? description = component.TryGetProperty("description", out JsonElement descElement) ? descElement.GetString() : string.Empty;
                string? content = component.TryGetProperty("content", out JsonElement contentElement) ? contentElement.GetString() : string.Empty;
                string? type = component.TryGetProperty("type", out JsonElement typeElement) ? typeElement.GetString() : string.Empty;
                string? id = component.TryGetProperty("id", out JsonElement idElement) ? idElement.GetString() : string.Empty;
                string? key = component.TryGetProperty("key", out JsonElement keyElement) ? keyElement.GetString() : string.Empty;
                string? inputType = component.TryGetProperty("inputType", out JsonElement inputTypeElement) ? inputTypeElement.GetString() : string.Empty;

                if (type == "htmlelement")
                {
                    DynamicContents.Add(CreateLabel(content, id, FontSizeOption.Large));
                }

                if (type == "datagrid")
                {
                    DynamicContents.Add(CreateLabel(description, id, FontSizeOption.Medium));
                }

                if (type == "textfield")
                {
                    DynamicContents.Add(CreateTextField(label, key));
                }

                if (type == "textarea")
                {
                    DynamicContents.Add(CreateEditorField(label, key));
                }

                if (component.TryGetProperty("components", out JsonElement subComponents) && subComponents.ValueKind == JsonValueKind.Array)
                {
                    processComponents(subComponents);
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    private Label CreateLabel(string text, string id, FontSizeOption fontSize, Thickness? margin = null)
    {
        return new Label
        {
            Text = text,
            StyleId = id,
            FontSize = (double)fontSize,
            FontAttributes = FontAttributes.Bold,
            Margin = new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a Button
    private Button CreateButton(string text, string id, InputType? inputType = InputType.Text, Thickness? margin = null)
    {
        return new Button
        {
            Text = text,
            StyleId = id,
            FontSize = (double)FontSizeOption.Medium,
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a TextField
    private TextField CreateTextField(string text, string id, InputType? inputType = InputType.Text, Thickness? margin = null)
    {
        return new TextField
        {
            Title = text,
            StyleId = id,
            FontSize = (double)FontSizeOption.Medium,
            Keyboard = Keyboard.Text,
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a EditorField
    private EditorField CreateEditorField(string text, string id, InputType? inputType = InputType.Text, Thickness? margin = null)
    {
        return new EditorField
        {
            Title = text,
            StyleId = id,
            FontSize = (double)FontSizeOption.Medium,
            Keyboard = Keyboard.Text,
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a PickerField
    private PickerField CreatePickerField(string title, IEnumerable<string> items, string defaultSelection = null, Thickness? margin = null)
    {
        return new PickerField
        {
            Title = title,
            ItemsSource = items.ToList(),
            SelectedItem = defaultSelection ?? items.FirstOrDefault(), // Default to first item if none specified
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a DatePickerField
    private DatePickerField CreateDatePickerField(string title, DateTime? defaultDate = null, Thickness? margin = null)
    {
        return new DatePickerField
        {
            Title = title,
            Date = defaultDate ?? DateTime.Now, // Default to current date if none specified
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };
    }

    // Function to create a RadioButtonGroupView
    private RadioButtonGroupView CreateRadioButtonGroupView(string[] options, string[] values, Thickness? margin = null)
    {
        if (options.Length != values.Length)
        {
            throw new ArgumentException("Options and values arrays must have the same length.");
        }

        var radioButtonGroupView = new RadioButtonGroupView
        {
            Margin = margin ?? new Thickness(0, 0, 0, 20)
        };

        for (int i = 0; i < options.Length; i++)
        {
            radioButtonGroupView.Children.Add(new UraniumUI.Material.Controls.RadioButton
            {
                Text = options[i],
                Value = values[i]
            });
        }

        return radioButtonGroupView;
    }
}